// Prisma schema for Suba&Go auction app
// Compatible with Vercel Postgres integration

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums matching TypeORM enums
enum UserRoleEnum {
  ADMIN
  USER
  AUCTION_MANAGER

  @@map("user_role_enum")
}

enum ItemStateEnum {
  DISPONIBLE
  EN_SUBASTA
  VENDIDO
  RETIRADO

  @@map("item_state_enum")
}

enum LegalStatusEnum {
  LEGAL
  ILEGAL
  PENDIENTE

  @@map("legal_status_enum")
}

// Base model with common fields matching TypeORM BaseEntity
model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
  deletedAt DateTime?

  // User-specific fields matching TypeORM entity
  name        String?
  email       String
  phone       String?
  password    String
  rut         String?
  public_name String?
  role        UserRoleEnum @default(AUCTION_MANAGER)

  // Relations
  tenantId  String?
  tenant    Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])

  // Auction-related relations
  bids      Bid[]

  // Unique constraints matching TypeORM indexes
  @@unique([email], map: "IDX_user_email_unique")
  @@unique([rut], map: "IDX_user_rut_unique")
  @@map("user")
}

model Tenant {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
  deletedAt DateTime?

  name      String
  domain    String   @unique

  // Relations
  users        User[]
  companies    Company[]
  items        Item[]
  auctions     Auction[]
  bids         Bid[]
  observations Observation[]

  @@map("tenant")
}

model Company {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
  deletedAt DateTime?

  // Company-specific fields matching TypeORM entity
  name              String
  logo              String?
  principal_color   String?
  principal_color2  String?
  secondary_color   String?
  secondary_color2  String?
  secondary_color3  String?

  // Relations
  tenantId  String
  tenant    Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  users     User[]

  // Unique constraint matching TypeORM index
  @@unique([name, tenantId], map: "IDX_company_name_tenant_unique")
  @@map("company")
}

model Item {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isDeleted    Boolean  @default(false)
  deletedAt    DateTime?

  // Item-specific fields matching TypeORM entity
  plate        String?
  brand        String?
  model        String?
  year         Int?
  version      String?
  photos       String?
  docs         String?
  kilometraje  Int?
  legal_status LegalStatusEnum?
  state        ItemStateEnum @default(DISPONIBLE)

  // Relations
  tenantId     String
  tenant       Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  auctionItems AuctionItem[]

  @@map("item")
}

model Auction {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  deletedAt   DateTime?

  // Auction-specific fields (will be added when we have the TypeORM entity details)
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  status      String   @default("PENDING")

  // Relations
  tenantId    String
  tenant      Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  items       AuctionItem[]

  @@map("auction")
}

model AuctionItem {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  deletedAt   DateTime?
  
  startingBid Decimal  @db.Decimal(10, 2)
  reservePrice Decimal? @db.Decimal(10, 2)
  
  // Relations
  auctionId   String
  auction     Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  itemId      String
  item        Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  bids        Bid[]
  
  @@map("auction_item")
}

model Bid {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  deletedAt   DateTime?

  // Bid-specific fields matching TypeORM entity
  offered_price Decimal  @db.Decimal(10, 2)
  bid_time      DateTime @default(now())

  // Relations
  tenantId      String
  tenant        Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId        String
  user          User @relation(fields: [userId], references: [id])
  auctionItemId String
  auctionItem   AuctionItem @relation(fields: [auctionItemId], references: [id])

  @@map("bid")
}

model Observation {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  deletedAt   DateTime?

  // Observation-specific fields matching TypeORM entity
  title       String
  description String

  // Relations
  tenantId    String
  tenant      Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("observation")
}

model AuditLog {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
  deletedAt DateTime?

  // AuditLog-specific fields
  action     String
  entityType String
  entityId   String
  changes    Json?
  userId     String?

  @@map("audit_log")
}
